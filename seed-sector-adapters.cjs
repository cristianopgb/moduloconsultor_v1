const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

const supabaseUrl = 'https://gljoasdvlaitplbmbtzg.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imdsam9hc2R2bGFpdHBsYm1idHpnIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDAwOTE2NSwiZXhwIjoyMDY5NTg1MTY1fQ.BqEqPO5fMaI5WpEkkvQKdcw-JQl5c0PBxe0JB3OBGCY';

const supabase = createClient(supabaseUrl, supabaseKey);

const sectors = [
  {
    setor_nome: 'Sa√∫de',
    setor_descricao: 'Cl√≠nicas, hospitais, consult√≥rios, laborat√≥rios',
    kpis: [
      { nome: 'Taxa de Ocupa√ß√£o', descricao: '% de leitos ou salas ocupados', formula: '(Leitos Ocupados / Total Leitos) √ó 100', meta_ideal: '75-85%' },
      { nome: 'Tempo M√©dio de Espera', descricao: 'Tempo que paciente aguarda atendimento', formula: 'Soma Tempos de Espera / N√∫mero de Pacientes', meta_ideal: '< 30 minutos' },
      { nome: 'No-Show Rate', descricao: 'Taxa de faltas em consultas', formula: '(Consultas Faltadas / Total Agendadas) √ó 100', meta_ideal: '< 10%' }
    ],
    perguntas_anamnese: [
      { campo: 'tipo_estabelecimento', pergunta: 'Tipo de estabelecimento?', tipo: 'select', opcoes: ['Consult√≥rio', 'Cl√≠nica', 'Hospital', 'Laborat√≥rio'] },
      { campo: 'especialidades', pergunta: 'Quais especialidades atende?', tipo: 'text' },
      { campo: 'num_profissionais', pergunta: 'Quantos profissionais de sa√∫de?', tipo: 'number' }
    ],
    metodologias_recomendadas: ['SIPOC', '5W2H', 'Matriz de Prioriza√ß√£o'],
    problemas_comuns: ['Longa fila de espera', 'Alta taxa de no-show', 'Baixa produtividade m√©dica', 'Gest√£o de agenda ineficiente'],
    entregaveis_tipicos: ['Protocolo de Atendimento', 'Fluxo de Agendamento Otimizado', 'SLA de Atendimento'],
    tags: ['saude', 'clinica', 'hospital', 'medicina'],
    prioridade: 9
  },
  {
    setor_nome: 'Educa√ß√£o',
    setor_descricao: 'Escolas, cursos, universidades, treinamentos',
    kpis: [
      { nome: 'Taxa de Evas√£o', descricao: '% de alunos que abandonam', formula: '(Alunos Evadidos / Total Matriculados) √ó 100', meta_ideal: '< 10%' },
      { nome: 'NPS', descricao: 'Satisfa√ß√£o dos alunos', formula: '% Promotores - % Detratores', meta_ideal: '> 60' },
      { nome: 'Taxa de Convers√£o', descricao: '% de leads que matriculam', formula: '(Matr√≠culas / Leads) √ó 100', meta_ideal: '> 20%' }
    ],
    perguntas_anamnese: [
      { campo: 'tipo_ensino', pergunta: 'Tipo de ensino oferecido?', tipo: 'select', opcoes: ['Presencial', 'Online', 'H√≠brido'] },
      { campo: 'nivel_ensino', pergunta: 'N√≠vel de ensino?', tipo: 'multiselect', opcoes: ['Fundamental', 'M√©dio', 'Superior', 'Cursos Livres'] },
      { campo: 'num_alunos', pergunta: 'Quantos alunos ativos?', tipo: 'number' }
    ],
    metodologias_recomendadas: ['Business Model Canvas', '5W2H', 'SIPOC'],
    problemas_comuns: ['Alta taxa de evas√£o', 'Baixa convers√£o de leads', 'Inadimpl√™ncia elevada', 'Dificuldade de escalar'],
    entregaveis_tipicos: ['Plano de Reten√ß√£o de Alunos', 'Funil de Convers√£o Otimizado', 'Jornada do Aluno'],
    tags: ['educacao', 'escola', 'curso', 'ensino'],
    prioridade: 8
  },
  {
    setor_nome: 'Alimenta√ß√£o',
    setor_descricao: 'Restaurantes, bares, lanchonetes, food service',
    kpis: [
      { nome: 'CMV', descricao: '% do custo dos ingredientes', formula: '(Custo Ingredientes / Faturamento) √ó 100', meta_ideal: '28-35%' },
      { nome: 'Ticket M√©dio', descricao: 'Valor m√©dio por cliente', formula: 'Faturamento / N√∫mero de Clientes', meta_ideal: 'Crescimento constante' },
      { nome: 'Taxa de Ocupa√ß√£o', descricao: '% de mesas ocupadas', formula: '(Mesas Ocupadas / Total Mesas) √ó 100', meta_ideal: '> 70%' }
    ],
    perguntas_anamnese: [
      { campo: 'tipo_estabelecimento', pergunta: 'Tipo de estabelecimento?', tipo: 'select', opcoes: ['Restaurante', 'Bar', 'Lanchonete', 'Delivery'] },
      { campo: 'capacidade_lugares', pergunta: 'Capacidade de lugares?', tipo: 'number' },
      { campo: 'faz_delivery', pergunta: 'Trabalha com delivery?', tipo: 'select', opcoes: ['Sim, pr√≥prio', 'Sim, por apps', 'N√£o'] }
    ],
    metodologias_recomendadas: ['SIPOC', 'Cadeia de Valor', '5W2H'],
    problemas_comuns: ['CMV alto', 'Falta de padroniza√ß√£o', 'Rotatividade de funcion√°rios', 'Tempo de preparo longo'],
    entregaveis_tipicos: ['Ficha T√©cnica de Pratos', 'Plano de Redu√ß√£o de CMV', 'Card√°pio Engenhado'],
    tags: ['alimentacao', 'restaurante', 'bar', 'gastronomia'],
    prioridade: 7
  },
  {
    setor_nome: 'Log√≠stica e Transportes',
    setor_descricao: 'Transportadoras, entregas, armazenagem, distribui√ß√£o',
    kpis: [
      { nome: 'OTIF', descricao: 'Entregas no prazo e completas', formula: '(Entregas OTIF / Total Entregas) √ó 100', meta_ideal: '> 95%' },
      { nome: 'Custo por Km', descricao: 'Custo operacional por km', formula: 'Custos Totais / Total Km Rodados', meta_ideal: 'Redu√ß√£o cont√≠nua' },
      { nome: 'Taxa de Ocupa√ß√£o de Frota', descricao: '% da capacidade utilizada', formula: '(Peso Transportado / Capacidade Total) √ó 100', meta_ideal: '> 80%' }
    ],
    perguntas_anamnese: [
      { campo: 'tipo_operacao', pergunta: 'Tipo de opera√ß√£o?', tipo: 'multiselect', opcoes: ['Transporte Rodovi√°rio', 'Armazenagem', 'Distribui√ß√£o Urbana'] },
      { campo: 'tamanho_frota', pergunta: 'Tamanho da frota?', tipo: 'text' },
      { campo: 'area_atuacao', pergunta: '√Årea de atua√ß√£o?', tipo: 'select', opcoes: ['Local', 'Regional', 'Nacional'] }
    ],
    metodologias_recomendadas: ['SIPOC', 'Cadeia de Valor', '5 Porqu√™s'],
    problemas_comuns: ['Rotas n√£o otimizadas', 'Alto custo de combust√≠vel', 'Atrasos recorrentes', 'Ociosidade de ve√≠culos'],
    entregaveis_tipicos: ['Plano de Roteiriza√ß√£o', 'Matriz de Custos Log√≠sticos', 'SLA de Entregas'],
    tags: ['logistica', 'transportes', 'entregas'],
    prioridade: 6
  },
  {
    setor_nome: 'Hotelaria e Turismo',
    setor_descricao: 'Hot√©is, pousadas, resorts, ag√™ncias de viagem',
    kpis: [
      { nome: 'Taxa de Ocupa√ß√£o', descricao: '% de quartos ocupados', formula: '(Quartos Ocupados / Total Quartos) √ó 100', meta_ideal: '> 70%' },
      { nome: 'RevPAR', descricao: 'Revenue per Available Room', formula: 'Receita de Hospedagem / Total Quartos Dispon√≠veis', meta_ideal: 'Crescimento constante' },
      { nome: 'NPS', descricao: 'Satisfa√ß√£o do h√≥spede', formula: '% Promotores - % Detratores', meta_ideal: '> 70' }
    ],
    perguntas_anamnese: [
      { campo: 'tipo_estabelecimento', pergunta: 'Tipo de estabelecimento?', tipo: 'select', opcoes: ['Hotel', 'Pousada', 'Resort', 'Hostel'] },
      { campo: 'num_quartos', pergunta: 'N√∫mero de quartos?', tipo: 'number' },
      { campo: 'classificacao', pergunta: 'Classifica√ß√£o?', tipo: 'select', opcoes: ['3 estrelas', '4 estrelas', '5 estrelas'] }
    ],
    metodologias_recomendadas: ['Business Model Canvas', 'SIPOC', '5W2H'],
    problemas_comuns: ['Baixa taxa de ocupa√ß√£o', 'Sazonalidade alta', 'Depend√™ncia de OTAs', 'Custos operacionais altos'],
    entregaveis_tipicos: ['Estrat√©gia de Revenue Management', 'Plano de Marketing Digital', 'Protocolo de Atendimento'],
    tags: ['hotel', 'turismo', 'hospedagem'],
    prioridade: 5
  }
];

(async () => {
  console.log('üöÄ Iniciando carga em massa de Sector Adapters...\n');

  let successCount = 0;
  let errorCount = 0;

  for (const sector of sectors) {
    try {
      const { data, error } = await supabase
        .from('sector_adapters')
        .insert({
          setor_nome: sector.setor_nome,
          setor_descricao: sector.setor_descricao,
          kpis: sector.kpis,
          perguntas_anamnese: sector.perguntas_anamnese,
          metodologias_recomendadas: sector.metodologias_recomendadas,
          problemas_comuns: sector.problemas_comuns,
          entregaveis_tipicos: sector.entregaveis_tipicos,
          tags: sector.tags,
          prioridade: sector.prioridade,
          ativo: true
        })
        .select();

      if (error) {
        if (error.code === '23505') {
          console.log(`‚ö†Ô∏è  ${sector.setor_nome} - J√° existe (pulando)`);
        } else {
          console.error(`‚ùå ${sector.setor_nome} - Erro:`, error.message);
          errorCount++;
        }
      } else {
        console.log(`‚úÖ ${sector.setor_nome} - Inserido com sucesso!`);
        successCount++;
      }
    } catch (error) {
      console.error(`‚ùå ${sector.setor_nome} - Exce√ß√£o:`, error.message);
      errorCount++;
    }
  }

  console.log(`\nüìä Resumo da Carga:`);
  console.log(`   ‚úÖ Sucesso: ${successCount}`);
  console.log(`   ‚ùå Erros: ${errorCount}`);
  console.log(`   üì¶ Total: ${sectors.length}`);

  // Verificar total no banco
  const { count } = await supabase
    .from('sector_adapters')
    .select('*', { count: 'exact', head: true })
    .eq('ativo', true);

  console.log(`\nüóÑÔ∏è  Total de adapters ativos no banco: ${count}`);

  // Listar todos
  const { data: allSectors } = await supabase
    .from('sector_adapters')
    .select('setor_nome, prioridade, tags')
    .eq('ativo', true)
    .order('prioridade', { ascending: false });

  console.log(`\nüìã Adapters dispon√≠veis:`);
  allSectors?.forEach(s => {
    console.log(`   ${s.prioridade} - ${s.setor_nome} [${s.tags.join(', ')}]`);
  });

  console.log('\n‚ú® Carga conclu√≠da!');
})();
