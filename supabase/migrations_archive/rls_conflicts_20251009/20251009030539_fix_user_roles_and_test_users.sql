/*
  # Corrigir Roles de Usu√°rios e Criar Usu√°rios de Teste
  
  ## Problema
  Os erros 403 est√£o ocorrendo porque:
  1. Os usu√°rios n√£o t√™m o campo 'role' no raw_app_meta_data
  2. As pol√≠ticas RLS verificam role='master' no metadata
  3. Os usu√°rios master@demo e user@demo n√£o existem
  
  ## Solu√ß√£o
  1. Atualizar metadata dos usu√°rios existentes
  2. Configurar roles apropriadamente
  3. Instruir como criar usu√°rios de teste
  
  ## Seguran√ßa
  - Mant√©m RLS habilitado
  - Usa metadata seguro (raw_app_meta_data)
  - N√£o exp√µe senhas
*/

-- ============================================================================
-- PARTE 1: ATUALIZAR METADATA DOS USU√ÅRIOS EXISTENTES
-- ============================================================================

-- Definir role padr√£o 'user' para usu√°rios sem role
UPDATE auth.users
SET raw_app_meta_data = 
  CASE 
    WHEN raw_app_meta_data IS NULL THEN '{"role": "user"}'::jsonb
    WHEN raw_app_meta_data->>'role' IS NULL THEN 
      raw_app_meta_data || '{"role": "user"}'::jsonb
    ELSE raw_app_meta_data
  END
WHERE raw_app_meta_data->>'role' IS NULL OR raw_app_meta_data IS NULL;

-- Atualizar emails com 'master' para role master
UPDATE auth.users
SET raw_app_meta_data = raw_app_meta_data || '{"role": "master"}'::jsonb
WHERE email ILIKE '%master%' 
  AND (raw_app_meta_data->>'role' IS NULL OR raw_app_meta_data->>'role' != 'master');

-- Atualizar emails com 'admin' para role master
UPDATE auth.users
SET raw_app_meta_data = raw_app_meta_data || '{"role": "master"}'::jsonb
WHERE email ILIKE '%admin%' 
  AND (raw_app_meta_data->>'role' IS NULL OR raw_app_meta_data->>'role' != 'master');

-- ============================================================================
-- PARTE 2: GARANTIR SINCRONIZA√á√ÉO COM TABELA PUBLIC.USERS
-- ============================================================================

-- Atualizar tabela public.users com base nos roles do auth.users
UPDATE public.users u
SET role = COALESCE((
  SELECT 
    CASE 
      WHEN au.raw_app_meta_data->>'role' = 'master' THEN 'master'::user_role
      ELSE 'user'::user_role
    END
  FROM auth.users au
  WHERE au.id = u.id
), 'user'::user_role)
WHERE u.role IS NULL OR u.role::text != COALESCE((
  SELECT au.raw_app_meta_data->>'role'
  FROM auth.users au
  WHERE au.id = u.id
), 'user');

-- ============================================================================
-- PARTE 3: CRIAR FUN√á√ÉO HELPER PARA VERIFICAR SE √â MASTER
-- ============================================================================

CREATE OR REPLACE FUNCTION public.is_master(user_id uuid DEFAULT auth.uid())
RETURNS boolean
LANGUAGE sql
SECURITY DEFINER
STABLE
AS $$
  SELECT EXISTS (
    SELECT 1 
    FROM auth.users au
    WHERE au.id = COALESCE(user_id, auth.uid())
    AND (
      (au.raw_app_meta_data->>'role' = 'master')
      OR (au.email ILIKE '%master%')
      OR (au.email ILIKE '%admin%')
    )
  );
$$;

COMMENT ON FUNCTION public.is_master IS 
  'Verifica se um usu√°rio √© master baseado no metadata ou email. Usa SECURITY DEFINER para acessar auth.users.';

-- ============================================================================
-- PARTE 4: VERIFICA√á√ÉO E RELAT√ìRIO
-- ============================================================================

DO $$
DECLARE
  v_total_users integer;
  v_master_users integer;
  v_regular_users integer;
BEGIN
  -- Contar usu√°rios
  SELECT COUNT(*) INTO v_total_users FROM auth.users;
  
  SELECT COUNT(*) INTO v_master_users 
  FROM auth.users 
  WHERE raw_app_meta_data->>'role' = 'master' 
     OR email ILIKE '%master%' 
     OR email ILIKE '%admin%';
  
  v_regular_users := v_total_users - v_master_users;
  
  -- Relat√≥rio
  RAISE NOTICE '';
  RAISE NOTICE '============================================================================';
  RAISE NOTICE '‚úÖ CORRE√á√ÉO DE ROLES CONCLU√çDA COM SUCESSO!';
  RAISE NOTICE '============================================================================';
  RAISE NOTICE '';
  RAISE NOTICE 'üìä RESUMO:';
  RAISE NOTICE '   ‚Ä¢ Total de usu√°rios: %', v_total_users;
  RAISE NOTICE '   ‚Ä¢ Usu√°rios Master: %', v_master_users;
  RAISE NOTICE '   ‚Ä¢ Usu√°rios Regulares: %', v_regular_users;
  RAISE NOTICE '';
  RAISE NOTICE 'üîß A√á√ïES REALIZADAS:';
  RAISE NOTICE '   ‚Ä¢ Metadata atualizado para todos os usu√°rios';
  RAISE NOTICE '   ‚Ä¢ Emails com "master" ou "admin" promovidos a master';
  RAISE NOTICE '   ‚Ä¢ Tabela public.users sincronizada';
  RAISE NOTICE '   ‚Ä¢ Fun√ß√£o helper is_master() criada';
  RAISE NOTICE '';
  RAISE NOTICE 'üìù PARA CRIAR USU√ÅRIOS DE TESTE:';
  RAISE NOTICE '   1. Use a interface de cadastro da aplica√ß√£o';
  RAISE NOTICE '   2. Para master: use email contendo "master" (ex: master@demo)';
  RAISE NOTICE '   3. Para user: use qualquer outro email (ex: user@demo)';
  RAISE NOTICE '   4. O sistema detectar√° automaticamente o role pelo email';
  RAISE NOTICE '';
  RAISE NOTICE '‚ö†Ô∏è  IMPORTANTE:';
  RAISE NOTICE '   ‚Ä¢ Fa√ßa logout e login novamente para aplicar as mudan√ßas';
  RAISE NOTICE '   ‚Ä¢ As pol√≠ticas RLS agora funcionar√£o corretamente';
  RAISE NOTICE '   ‚Ä¢ Erros 403 devem ser eliminados';
  RAISE NOTICE '';
  RAISE NOTICE '============================================================================';
  RAISE NOTICE '';
END $$;
